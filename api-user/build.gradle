plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.nips'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	implementation group: 'com.auth0', name: 'java-jwt', version: '4.4.0'
	implementation 'com.fasterxml.jackson.core:jackson-databind'

	// Database
	implementation 'org.postgresql:postgresql:42.5.1'

	// OpenAPI docs
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.3.0'

	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '3.2.3'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.10.0'
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.9.2'
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.9.2'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.11"
	reportsDirectory = layout.buildDirectory.dir('jacoco_report')
}

def excludesClasses = [
		'**/Application.class',
		'**/model/**/*.class',
		'**/repository/**/*.class',
		'**/crud/**/*.class',
		'**/constant/**/*.class',
		'**/dto/**/*.class',
		'**/config/**/*.class',
		'**/exception/**/*.class',
		'**/mapper/**/*.class',
		'**/controller/**/*.class',
		'**/entity/**/*.class',
]

tasks.named('jacocoTestReport') {
	dependsOn test
	reports {
		xml.required = true
	}

	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: excludesClasses)
	}))


}

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: excludesClasses)
		}))
	}
	violationRules {
		rule {
			limit {
				minimum = 0.9
			}
		}
	}
}